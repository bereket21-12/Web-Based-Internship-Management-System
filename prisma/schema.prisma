// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Role {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  users       User[]
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  email            String         @unique
  password         String
  firstName        String
  middleName       String
  userName         String         @unique
  role             Role?          @relation(fields: [roleName], references: [name])
  roleName         String?
  profilePic       String
  imagePublicId    String
  phoneNum         String
  hashedRt         String?
  verified         Boolean?
  notifications    Notification[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  conversationIds  String[]       @db.ObjectId
  conversations    Conversation[] @relation(fields: [conversationIds], references: [id])
  Student          Student[]
  Company          Company[]
  University       University[]
  College          College[]
  Department       Department[]
  Advisor          Advisor[]
  Mentor           Mentor[]
  messagesSent     Message[]      @relation("Sender")
  messagesReceived Message[]      @relation("Receiver")
}

model Student {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String        @unique @db.ObjectId
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  universityId   String?       @unique @db.ObjectId
  University     University?   @relation(fields: [universityId], references: [id])
  departmentId   String?       @unique @db.ObjectId
  department     Department?   @relation(fields: [departmentId], references: [id])
  year           Int
  gpa            Float
  skills         String[]
  resumeUrl      String?
  resumePublicId String?
  isOnInternship Boolean?
  advisorId      String?       @db.ObjectId
  advisor        Advisor?      @relation(fields: [advisorId], references: [id])
  mentorId       String?       @db.ObjectId
  mentor         Mentor?       @relation(fields: [mentorId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Report         Report[]
  Feedback       Feedback[]
  Evaluation     Evaluation[]
  Application    Application[]
}

model Internship {
  id                      String                @id @default(auto()) @map("_id") @db.ObjectId
  title                   String
  companyId               String                @db.ObjectId
  company                 Company               @relation(fields: [companyId], references: [id])
  duration                String
  startDate               DateTime
  endDate                 DateTime
  schedule                Schedule
  compensations           Compensations
  description             InternshipDescription @relation(fields: [internshipDescriptionId], references: [id])
  internshipDescriptionId String                @unique @db.ObjectId
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  Report                  Report[]
  Application             Application[]
}

model InternshipDescription {
  id                      String      @id @default(auto()) @map("_id") @db.ObjectId
  responsibilities        String[]
  qualifications          String[]
  applicationInstructions String
  deadline                DateTime
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  Internship              Internship?
}

model Company {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  name               String        @unique
  industry           String
  companyHRId        String        @db.ObjectId
  companyHR          User          @relation(fields: [companyHRId], references: [id])
  logoUrl            String
  logoPublicId       String
  website            String?
  email              String
  phoneNum           String
  address            Address?
  internshiprOferred Internship[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  Mentor             Mentor[]
  Feedback           Feedback[]
  Application        Application[]
}

model Application {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  studentId    String            @db.ObjectId
  student      Student           @relation(fields: [studentId], references: [id])
  internshipId String            @db.ObjectId
  internship   Internship        @relation(fields: [internshipId], references: [id])
  companyId    String            @db.ObjectId
  company      Company           @relation(fields: [companyId], references: [id])
  status       ApplicationStatus
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
}

model Conversation {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  participantIds String[]  @db.ObjectId
  participants   User[]    @relation(fields: [participantIds], references: [id])
  messages       Message[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String       @db.ObjectId
  sender         User         @relation("Sender", fields: [senderId], references: [id])
  receiverId     String       @db.ObjectId
  receiver       User         @relation("Receiver", fields: [receiverId], references: [id])
  content        String
  read           Boolean
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  content   String
  read      Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model University {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  name              String       @unique
  logoUrl           String
  logoPublicId      String
  websiteUrl        String?
  college           College[]
  departments       Department[]
  universityAdminId String       @db.ObjectId
  verified          Boolean      @default(false)
  universityAdmin   User         @relation(fields: [universityAdminId], references: [id])
  email             String       @unique
  phoneNum          String
  address           Address?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  Student           Student[]
}

model College {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  Collegename    String       @unique
  departments   Department[]
  collegeDeanId String     @db.ObjectId
  collegeDean   User        @relation(fields: [collegeDeanId], references: [id])
  universityId  String       @db.ObjectId
  university    University   @relation(fields: [universityId], references: [id])
  email         String
  phoneNum      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  Form          Form[]
}

model Department {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  name             String      @unique
  departmentHeadId String?      @db.ObjectId
  departmentHead   User?        @relation(fields: [departmentHeadId], references: [id])
  collegeId        String      @db.ObjectId
  college          College     @relation(fields: [collegeId], references: [id])
  email            String
  phoneNum         String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  Student          Student[]
  University       University? @relation(fields: [universityId], references: [id])
  universityId     String?     @db.ObjectId
  Advisor          Advisor[]
}

model Advisor {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  userId       String       @db.ObjectId
  user         User         @relation(fields: [userId], references: [id])
  departmentId String       @db.ObjectId
  department   Department   @relation(fields: [departmentId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Student      Student[]
  Report       Report[]
  Feedback     Feedback[]
  Evaluation   Evaluation[]
}

model Mentor {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  userId     String       @db.ObjectId
  user       User         @relation(fields: [userId], references: [id])
  companyId  String       @db.ObjectId
  company    Company      @relation(fields: [companyId], references: [id])
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Student    Student[]
  Report     Report[]
  Feedback   Feedback[]
  Evaluation Evaluation[]
}

model Feedback {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  internId  String?  @db.ObjectId
  intern    Student? @relation(fields: [internId], references: [id])
  companyId String?  @db.ObjectId
  company   Company? @relation(fields: [companyId], references: [id])
  advisorId String?  @db.ObjectId
  advisor   Advisor? @relation(fields: [advisorId], references: [id])
  mentorId  String?  @db.ObjectId
  mentor    Mentor?  @relation(fields: [mentorId], references: [id])
  rating    Int?
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Report    Report[]
}

model Report {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  studentId         String     @db.ObjectId
  student           Student    @relation(fields: [studentId], references: [id])
  advisorId         String?    @db.ObjectId
  advisor           Advisor?   @relation(fields: [advisorId], references: [id])
  mentorId          String?    @db.ObjectId
  mentor            Mentor?    @relation(fields: [mentorId], references: [id])
  internshipId      String     @db.ObjectId
  internship        Internship @relation(fields: [internshipId], references: [id])
  title             String
  attachmentUrl     String?
  feedbackId        String?    @db.ObjectId
  feedback          Feedback?  @relation(fields: [feedbackId], references: [id])
  description       String
  challengesFaced   String[]
  lessonsLearned    String[]
  tasksAccomplished String[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Form {
  id                   String       @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  description          String
  attachedUrl          String?
  attachedFilePublicId String?
  collegeId            String       @db.ObjectId
  college              College      @relation(fields: [collegeId], references: [id])
  totalWeight          Int
  type                 FormType
  Evaluation           Evaluation[]
  Question             Question[]
}

model Question {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  content String
  weight  Int
  formId  String? @db.ObjectId
  form    Form?   @relation(fields: [formId], references: [id])
}

model Evaluation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId      String   @db.ObjectId
  student        Student  @relation(fields: [studentId], references: [id])
  mentorId       String?  @db.ObjectId
  mentor         Mentor?  @relation(fields: [mentorId], references: [id])
  advisorId      String?  @db.ObjectId
  advisor        Advisor? @relation(fields: [advisorId], references: [id])
  formId         String   @db.ObjectId
  form           Form?    @relation(fields: [formId], references: [id])
  evaluationDate DateTime
  response       Int?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum FormType {
  ADVISOR
  MENTOR
}

enum Schedule {
  FULL_TIME
  PART_TIME
  REMOTE
}

enum Compensations {
  PAID
  UNPAID
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}

type Address {
  city    String
  region  String
  subcity String?
}
